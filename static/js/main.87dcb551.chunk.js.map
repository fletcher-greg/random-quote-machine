{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","generateQuote","setState","count","state","randomBgColor","background","bgColors","randomColor","color","singleQuote","quotesArray","Math","floor","random","tweet","tweetLink","concat","quote","window","open","focus","character","_this2","fetch","then","data","json","console","log","react_default","a","createElement","style","className","dist_default","id","toUpperCase","href","Button_default","onClick","variant","React","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mSAiGeA,2BA1Fb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAoCFI,cAAgB,WACdP,EAAKQ,SAAS,CACZC,MAA4B,IAArBT,EAAKU,MAAMD,MAAc,EAAKT,EAAKU,MAAMD,OAAS,EACzDE,cAAe,CACbC,WAAYZ,EAAKU,MAAMG,SAASb,EAAKU,MAAMD,QAE7CK,YAAa,CACXC,MAAOf,EAAKU,MAAMG,SAASb,EAAKU,MAAMD,QAExCO,YAAahB,EAAKU,MAAMO,YACtBC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAM,QA/C9BnB,EAoDdqB,MAAQ,WACN,IAAIC,EAAS,yCAAAC,OACXvB,EAAKU,MAAMM,YAAYQ,OAEfC,OAAOC,KAAKJ,EAAW,UAC7BK,SAvDJ3B,EAAKU,MAAQ,CACXG,SAAU,CACR,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFF,cAAe,CACbC,WAAY,SAEdE,YAAa,CACXC,MAAO,SAGTN,MAAO,EACPQ,YAAa,CAAC,CAAEO,MAAO,gBAAiBI,UAAW,iBACnDZ,YAAa,CAAEQ,MAAO,iBAAkBI,UAAW,UAxBzC5B,mFA2BM,IAAA6B,EAAA1B,KAClB2B,MAAM,yDACHC,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAAE,GACJJ,EAAKrB,SAAS,CACZS,YAAagB,IAEfC,QAAQC,IAAIN,EAAKnB,MAAMO,gDA2B3B,OACEmB,EAAAC,EAAAC,cAAA,OAAKC,MAAOpC,KAAKO,MAAMC,cAAe6B,UAAU,eAC9CJ,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,MACAD,EAAAC,EAAAC,cAAA,OAAKI,GAAG,aACNN,EAAAC,EAAAC,cAAA,KAAGC,MAAOpC,KAAKO,MAAMI,YAAa4B,GAAG,QAClCvC,KAAKO,MAAMM,YAAYQ,OAG1BY,EAAAC,EAAAC,cAAA,KAAGC,MAAOpC,KAAKO,MAAMI,YAAa4B,GAAG,UAArC,MACMvC,KAAKO,MAAMM,YAAYY,UAAUe,eAGvCP,EAAAC,EAAAC,cAAA,KAAGM,KAAK,mCAAmCF,GAAG,eAA9C,WAIAN,EAAAC,EAAAC,cAACO,EAAAR,EAAD,CACES,QAAS3C,KAAKI,cACdwC,QAAQ,kBACRL,GAAG,aAHL,sBA9EQM,IAAMC,YCMJC,QACW,cAA7BzB,OAAO0B,SAASC,UAEe,UAA7B3B,OAAO0B,SAASC,UAEhB3B,OAAO0B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.87dcb551.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactFCCtest from \"react-fcctest\";\nimport Button from \"react-bootstrap/Button\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      bgColors: [\n        \"#E91E63\",\n        \"#9C27B0\",\n        \"#673AB7\",\n        \"#2196F3\",\n        \"#CDDC39\",\n        \"#FF5722\",\n        \"#FFEB3B\",\n        \"#FFC107\",\n        \"#607D8B\",\n        \"#00BCD4\"\n      ],\n      randomBgColor: {\n        background: \"green\"\n      },\n      randomColor: {\n        color: \"green\"\n      },\n\n      count: 0,\n      quotesArray: [{ quote: \"I'm in daner!\", character: \"Ralph Wiggum\" }],\n      singleQuote: { quote: \"i'm in trouble\", character: \"ralph\" }\n    };\n  }\n  componentDidMount() {\n    fetch(\"https://thesimpsonsquoteapi.glitch.me/quotes?count=10\")\n      .then(data => data.json())\n      .then(json => {\n        this.setState({\n          quotesArray: json\n        });\n        console.log(this.state.quotesArray);\n      });\n  }\n  generateQuote = () => {\n    this.setState({\n      count: this.state.count === 9 ? 0 : (this.state.count += 1),\n      randomBgColor: {\n        background: this.state.bgColors[this.state.count]\n      },\n      randomColor: {\n        color: this.state.bgColors[this.state.count]\n      },\n      singleQuote: this.state.quotesArray[\n        Math.floor(Math.random() * Math.floor(9))\n      ]\n    });\n  };\n\n  tweet = () => {\n    let tweetLink = `https://twitter.com/intent/tweet?text=${\n      this.state.singleQuote.quote\n    }`;\n    var win = window.open(tweetLink, \"_blank\");\n    win.focus();\n  };\n\n  render() {\n    return (\n      <div style={this.state.randomBgColor} className=\"myContainer\">\n        <ReactFCCtest />\n        <div id=\"quote-box\">\n          <p style={this.state.randomColor} id=\"text\">\n            {this.state.singleQuote.quote}\n          </p>\n\n          <p style={this.state.randomColor} id=\"author\">\n            -- {this.state.singleQuote.character.toUpperCase()}\n          </p>\n\n          <a href=\"https://twitter.com/intent/tweet\" id=\"tweet-quote\">\n            Tweeter\n          </a>\n\n          <Button\n            onClick={this.generateQuote}\n            variant=\"outline-primary\"\n            id=\"new-quote\"\n          >\n            New Quote\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}